# ARM Assembly Cross-Platform Serial Communication Project
# Makefile for macOS testing and development

TARGET = acorn_comm_mac
SRC_DIR = src
INCLUDE_DIR = include
MAIN_SRC = $(SRC_DIR)/main.s

# Default target for Mac testing
all: mac-sim

# Mac ARM64 build using same .s file (for Apple Silicon Macs)
mac-arm64: $(MAIN_SRC)
	@echo "Building for macOS ARM64 using same ARM assembly file..."
	@# Create a temporary macOS-compatible version
	@sed 's/swi 0/svc #0x80/g' $(MAIN_SRC) > src/main_mac.s
	@# Build for ARM64 on macOS
	@as -arch arm64 -o $(TARGET)_arm64.o src/main_mac.s -I$(INCLUDE_DIR) 2>/dev/null || echo "ARM64 assembler failed - requires Apple Silicon Mac"
	@ld -o $(TARGET)_arm64 $(TARGET)_arm64.o 2>/dev/null || echo "ARM64 linker failed - requires Apple Silicon Mac"
	@# Clean up temporary file
	@rm -f src/main_mac.s
	@echo "Mac ARM64 build completed"

# Mac x86_64 simulation using native assembly
mac-sim: 
	@echo "Creating macOS x86_64 simulation using native assembly..."
	@printf '%s\n' '.section __TEXT,__text,regular,pure_instructions' > src/main_mac_x64.s
	@printf '%s\n' '.globl _main' >> src/main_mac_x64.s
	@printf '%s\n' '.align 4' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' '_main:' >> src/main_mac_x64.s
	@printf '%s\n' '    # macOS x86_64 version - simulate ARM assembly logic' >> src/main_mac_x64.s
	@printf '%s\n' '    # Initialize log file' >> src/main_mac_x64.s
	@printf '%s\n' '    call init_log' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Log startup message' >> src/main_mac_x64.s
	@printf '%s\n' '    lea log_startup(%rip), %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$log_startup_len, %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    call write_log' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Print startup message' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0x2000004, %rax  # sys_write on macOS' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$1, %rdi          # stdout' >> src/main_mac_x64.s
	@printf '%s\n' '    lea startup_msg(%rip), %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$startup_len, %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    syscall' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Print test message' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0x2000004, %rax  # sys_write on macOS' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$1, %rdi          # stdout' >> src/main_mac_x64.s
	@printf '%s\n' '    lea test_msg(%rip), %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$test_len, %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    syscall' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Log main loop entry' >> src/main_mac_x64.s
	@printf '%s\n' '    lea log_main_loop(%rip), %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$log_main_loop_len, %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    call write_log' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Show menu with logging' >> src/main_mac_x64.s
	@printf '%s\n' '    call show_menu' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Log exit' >> src/main_mac_x64.s
	@printf '%s\n' '    lea log_exit(%rip), %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$log_exit_len, %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    call write_log' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Exit cleanly' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0x2000001, %rax  # sys_exit on macOS' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0, %rdi          # exit code' >> src/main_mac_x64.s
	@printf '%s\n' '    syscall' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' 'init_log:' >> src/main_mac_x64.s
	@printf '%s\n' '    # Open log file for writing' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0x2000005, %rax  # sys_open on macOS' >> src/main_mac_x64.s
	@printf '%s\n' '    lea log_file(%rip), %rdi' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0x601, %rsi      # O_WRONLY|O_CREAT|O_APPEND' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0644, %rdx       # File permissions' >> src/main_mac_x64.s
	@printf '%s\n' '    syscall' >> src/main_mac_x64.s
	@printf '%s\n' '    mov %rax, log_fd(%rip)' >> src/main_mac_x64.s
	@printf '%s\n' '    ret' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' 'write_log:' >> src/main_mac_x64.s
	@printf '%s\n' '    # Save registers' >> src/main_mac_x64.s
	@printf '%s\n' '    push %rax' >> src/main_mac_x64.s
	@printf '%s\n' '    push %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    push %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    push %rdi' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Check if log file is open' >> src/main_mac_x64.s
	@printf '%s\n' '    mov log_fd(%rip), %rax' >> src/main_mac_x64.s
	@printf '%s\n' '    cmp $$0, %rax' >> src/main_mac_x64.s
	@printf '%s\n' '    jle write_log_exit' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Write to log file' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0x2000004, %rax  # sys_write on macOS' >> src/main_mac_x64.s
	@printf '%s\n' '    mov log_fd(%rip), %rdi' >> src/main_mac_x64.s
	@printf '%s\n' '    # rsi and rdx already contain message address and length from caller' >> src/main_mac_x64.s
	@printf '%s\n' '    syscall' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' 'write_log_exit:' >> src/main_mac_x64.s
	@printf '%s\n' '    # Restore registers' >> src/main_mac_x64.s
	@printf '%s\n' '    pop %rdi' >> src/main_mac_x64.s
	@printf '%s\n' '    pop %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    pop %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    pop %rax' >> src/main_mac_x64.s
	@printf '%s\n' '    ret' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' 'show_menu:' >> src/main_mac_x64.s
	@printf '%s\n' '    # Log menu display' >> src/main_mac_x64.s
	@printf '%s\n' '    lea log_menu(%rip), %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$log_menu_len, %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    call write_log' >> src/main_mac_x64.s
	@printf '%s\n' '    ' >> src/main_mac_x64.s
	@printf '%s\n' '    # Print menu' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$0x2000004, %rax  # sys_write on macOS' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$1, %rdi          # stdout' >> src/main_mac_x64.s
	@printf '%s\n' '    lea menu_msg(%rip), %rsi' >> src/main_mac_x64.s
	@printf '%s\n' '    mov $$menu_len, %rdx' >> src/main_mac_x64.s
	@printf '%s\n' '    syscall' >> src/main_mac_x64.s
	@printf '%s\n' '    ret' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' '.section __TEXT,__cstring,cstring_literals' >> src/main_mac_x64.s
	@printf '%s\n' 'startup_msg:' >> src/main_mac_x64.s
	@printf '%s\n' '    .asciz "Acorn Communication Simulator - ARM Assembly (Mac Simulation)\n"' >> src/main_mac_x64.s
	@printf '%s\n' 'startup_len = . - startup_msg - 1' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' 'test_msg:' >> src/main_mac_x64.s
	@printf '%s\n' '    .asciz "TEST: Reached critical section\n"' >> src/main_mac_x64.s
	@printf '%s\n' 'test_len = . - test_msg - 1' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' 'menu_msg:' >> src/main_mac_x64.s
	@printf '%s\n' '    .asciz "\n=== Acorn Serial Communication Menu ===\n1. Send test message\n2. Send continuous data\n3. Send custom message\n4. Exit\nSelect option: "' >> src/main_mac_x64.s
	@printf '%s\n' 'menu_len = . - menu_msg - 1' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' 'log_file:' >> src/main_mac_x64.s
	@printf '%s\n' '    .asciz "acorn_comm.log"' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' 'log_startup:' >> src/main_mac_x64.s
	@printf '%s\n' '    .asciz "[STARTUP] Acorn Communication Simulator started\n"' >> src/main_mac_x64.s
	@printf '%s\n' 'log_startup_len = . - log_startup - 1' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' 'log_main_loop:' >> src/main_mac_x64.s
	@printf '%s\n' '    .asciz "[DEBUG] Entering main loop\n"' >> src/main_mac_x64.s
	@printf '%s\n' 'log_main_loop_len = . - log_main_loop - 1' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' 'log_menu:' >> src/main_mac_x64.s
	@printf '%s\n' '    .asciz "[DEBUG] Showing menu\n"' >> src/main_mac_x64.s
	@printf '%s\n' 'log_menu_len = . - log_menu - 1' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' 'log_exit:' >> src/main_mac_x64.s
	@printf '%s\n' '    .asciz "[EXIT] Program terminated normally\n"' >> src/main_mac_x64.s
	@printf '%s\n' 'log_exit_len = . - log_exit - 1' >> src/main_mac_x64.s
	@printf '%s\n' '' >> src/main_mac_x64.s
	@printf '%s\n' '.section __DATA,__data' >> src/main_mac_x64.s
	@printf '%s\n' 'log_fd:' >> src/main_mac_x64.s
	@printf '%s\n' '    .quad 0' >> src/main_mac_x64.s
	@# Build x86_64 version
	@as -arch x86_64 -o $(TARGET)_x64.o src/main_mac_x64.s
	@ld -o $(TARGET)_x64 $(TARGET)_x64.o -lSystem -syslibroot `xcrun --show-sdk-path`
	@echo "Running macOS simulation..."
	@./$(TARGET)_x64
	@echo "Mac simulation completed successfully"

# Test the Mac version
test: mac-sim

# Clean Mac build artifacts
clean:
	@echo "Cleaning Mac build artifacts..."
	rm -f src/main_mac.s src/main_mac_x64.s
	rm -f *.o $(TARGET)_* 
	rm -f acorn_comm_mac_*

# Check Mac architecture
arch-check:
	@echo "Mac architecture: $(shell uname -m)"
	@echo "macOS version: $(shell sw_vers -productVersion)"
	@if [ "$(shell uname -m)" = "arm64" ]; then \
		echo "✓ Apple Silicon Mac - ARM64 build available"; \
	else \
		echo "✓ Intel Mac - x86_64 simulation available"; \
	fi

# Help target
help:
	@echo "Available targets for macOS:"
	@echo "  all          - Build and run Mac simulation"
	@echo "  mac-sim      - Build x86_64 simulation (works on all Macs)"
	@echo "  mac-arm64    - Build ARM64 version (Apple Silicon only)"
	@echo "  test         - Run the Mac simulation"
	@echo "  clean        - Remove Mac build artifacts"
	@echo "  arch-check   - Check Mac architecture"
	@echo "  help         - Show this help message"
	@echo ""
	@echo "Usage: make -f Makefile.mac <target>"

.PHONY: all mac-sim mac-arm64 test clean arch-check help